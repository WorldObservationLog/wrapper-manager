// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--dev
// source: proto/manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WrapperManagerService_Status_FullMethodName      = "/manager.v1.WrapperManagerService/Status"
	WrapperManagerService_Login_FullMethodName       = "/manager.v1.WrapperManagerService/Login"
	WrapperManagerService_Decrypt_FullMethodName     = "/manager.v1.WrapperManagerService/Decrypt"
	WrapperManagerService_M3U8_FullMethodName        = "/manager.v1.WrapperManagerService/M3U8"
	WrapperManagerService_Lyrics_FullMethodName      = "/manager.v1.WrapperManagerService/Lyrics"
	WrapperManagerService_License_FullMethodName     = "/manager.v1.WrapperManagerService/License"
	WrapperManagerService_WebPlayback_FullMethodName = "/manager.v1.WrapperManagerService/WebPlayback"
)

// WrapperManagerServiceClient is the client API for WrapperManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WrapperManagerServiceClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error)
	Login(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LoginRequest, LoginReply], error)
	Decrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DecryptRequest, DecryptReply], error)
	M3U8(ctx context.Context, in *M3U8Request, opts ...grpc.CallOption) (*M3U8Reply, error)
	Lyrics(ctx context.Context, in *LyricsRequest, opts ...grpc.CallOption) (*LyricsReply, error)
	License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseReply, error)
	WebPlayback(ctx context.Context, in *WebPlaybackRequest, opts ...grpc.CallOption) (*WebPlaybackReply, error)
}

type wrapperManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWrapperManagerServiceClient(cc grpc.ClientConnInterface) WrapperManagerServiceClient {
	return &wrapperManagerServiceClient{cc}
}

func (c *wrapperManagerServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, WrapperManagerService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wrapperManagerServiceClient) Login(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LoginRequest, LoginReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WrapperManagerService_ServiceDesc.Streams[0], WrapperManagerService_Login_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoginRequest, LoginReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WrapperManagerService_LoginClient = grpc.BidiStreamingClient[LoginRequest, LoginReply]

func (c *wrapperManagerServiceClient) Decrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DecryptRequest, DecryptReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WrapperManagerService_ServiceDesc.Streams[1], WrapperManagerService_Decrypt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DecryptRequest, DecryptReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WrapperManagerService_DecryptClient = grpc.BidiStreamingClient[DecryptRequest, DecryptReply]

func (c *wrapperManagerServiceClient) M3U8(ctx context.Context, in *M3U8Request, opts ...grpc.CallOption) (*M3U8Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(M3U8Reply)
	err := c.cc.Invoke(ctx, WrapperManagerService_M3U8_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wrapperManagerServiceClient) Lyrics(ctx context.Context, in *LyricsRequest, opts ...grpc.CallOption) (*LyricsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LyricsReply)
	err := c.cc.Invoke(ctx, WrapperManagerService_Lyrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wrapperManagerServiceClient) License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LicenseReply)
	err := c.cc.Invoke(ctx, WrapperManagerService_License_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wrapperManagerServiceClient) WebPlayback(ctx context.Context, in *WebPlaybackRequest, opts ...grpc.CallOption) (*WebPlaybackReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebPlaybackReply)
	err := c.cc.Invoke(ctx, WrapperManagerService_WebPlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WrapperManagerServiceServer is the server API for WrapperManagerService service.
// All implementations must embed UnimplementedWrapperManagerServiceServer
// for forward compatibility.
type WrapperManagerServiceServer interface {
	Status(context.Context, *emptypb.Empty) (*StatusReply, error)
	Login(grpc.BidiStreamingServer[LoginRequest, LoginReply]) error
	Decrypt(grpc.BidiStreamingServer[DecryptRequest, DecryptReply]) error
	M3U8(context.Context, *M3U8Request) (*M3U8Reply, error)
	Lyrics(context.Context, *LyricsRequest) (*LyricsReply, error)
	License(context.Context, *LicenseRequest) (*LicenseReply, error)
	WebPlayback(context.Context, *WebPlaybackRequest) (*WebPlaybackReply, error)
	mustEmbedUnimplementedWrapperManagerServiceServer()
}

// UnimplementedWrapperManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWrapperManagerServiceServer struct{}

func (UnimplementedWrapperManagerServiceServer) Status(context.Context, *emptypb.Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedWrapperManagerServiceServer) Login(grpc.BidiStreamingServer[LoginRequest, LoginReply]) error {
	return status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWrapperManagerServiceServer) Decrypt(grpc.BidiStreamingServer[DecryptRequest, DecryptReply]) error {
	return status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedWrapperManagerServiceServer) M3U8(context.Context, *M3U8Request) (*M3U8Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method M3U8 not implemented")
}
func (UnimplementedWrapperManagerServiceServer) Lyrics(context.Context, *LyricsRequest) (*LyricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lyrics not implemented")
}
func (UnimplementedWrapperManagerServiceServer) License(context.Context, *LicenseRequest) (*LicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method License not implemented")
}
func (UnimplementedWrapperManagerServiceServer) WebPlayback(context.Context, *WebPlaybackRequest) (*WebPlaybackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebPlayback not implemented")
}
func (UnimplementedWrapperManagerServiceServer) mustEmbedUnimplementedWrapperManagerServiceServer() {}
func (UnimplementedWrapperManagerServiceServer) testEmbeddedByValue()                               {}

// UnsafeWrapperManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WrapperManagerServiceServer will
// result in compilation errors.
type UnsafeWrapperManagerServiceServer interface {
	mustEmbedUnimplementedWrapperManagerServiceServer()
}

func RegisterWrapperManagerServiceServer(s grpc.ServiceRegistrar, srv WrapperManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedWrapperManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WrapperManagerService_ServiceDesc, srv)
}

func _WrapperManagerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperManagerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WrapperManagerService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperManagerServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WrapperManagerService_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WrapperManagerServiceServer).Login(&grpc.GenericServerStream[LoginRequest, LoginReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WrapperManagerService_LoginServer = grpc.BidiStreamingServer[LoginRequest, LoginReply]

func _WrapperManagerService_Decrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WrapperManagerServiceServer).Decrypt(&grpc.GenericServerStream[DecryptRequest, DecryptReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WrapperManagerService_DecryptServer = grpc.BidiStreamingServer[DecryptRequest, DecryptReply]

func _WrapperManagerService_M3U8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M3U8Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperManagerServiceServer).M3U8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WrapperManagerService_M3U8_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperManagerServiceServer).M3U8(ctx, req.(*M3U8Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _WrapperManagerService_Lyrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LyricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperManagerServiceServer).Lyrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WrapperManagerService_Lyrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperManagerServiceServer).Lyrics(ctx, req.(*LyricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WrapperManagerService_License_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperManagerServiceServer).License(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WrapperManagerService_License_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperManagerServiceServer).License(ctx, req.(*LicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WrapperManagerService_WebPlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WrapperManagerServiceServer).WebPlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WrapperManagerService_WebPlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WrapperManagerServiceServer).WebPlayback(ctx, req.(*WebPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WrapperManagerService_ServiceDesc is the grpc.ServiceDesc for WrapperManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WrapperManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager.v1.WrapperManagerService",
	HandlerType: (*WrapperManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _WrapperManagerService_Status_Handler,
		},
		{
			MethodName: "M3U8",
			Handler:    _WrapperManagerService_M3U8_Handler,
		},
		{
			MethodName: "Lyrics",
			Handler:    _WrapperManagerService_Lyrics_Handler,
		},
		{
			MethodName: "License",
			Handler:    _WrapperManagerService_License_Handler,
		},
		{
			MethodName: "WebPlayback",
			Handler:    _WrapperManagerService_WebPlayback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Login",
			Handler:       _WrapperManagerService_Login_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Decrypt",
			Handler:       _WrapperManagerService_Decrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/manager.proto",
}
